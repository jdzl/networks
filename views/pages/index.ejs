<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="author" content="David Zambrano Lizarazo">
    <title>Basic Temp Node Rjs</title>
      <% include ../partials/head %>
    <script src="js/react-0.14.7.js"></script>
    <script src="js/react-dom-0.14.7.js"></script>
    <script src="js/browser.min.js"></script>

    <script src="js/jquery.min.js"></script>


<script src="js/highcharts.js"></script>
<script src="js/exporting.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>

//*************************************************************************************************************
$(function () {
    $(document).ready(function () {
        Highcharts.setOptions({
            global: {
                useUTC: false
            }
        });

        $('#container').highcharts({
            chart: {
                type: 'spline', //gauge
                animation: Highcharts.svg, // don't animate in old IE
                marginRight: 10,
                events: {
                    load: function () {

                        // set up the updating of the chart each second
                        var series = this.series[0];
                        //setInterval(function () {
                            socket.on('voltaje', function(msg) {

                              if(msg > 34){
                              $('#volt').html("<span style='color:red'>"+msg+"°C</span>");
                            }else{
                              $('#volt').html("<span>"+msg+"°C</span>");
                            }

                              var x = (new Date()).getTime(); // current time
                              document.title = "Temp " +msg + "°C";
                              y = msg ;
                              series.addPoint([x, y], true, true);
                          });


                        //}, 1000);
                    }
                }
            },
            title: {
                text: 'Nodejs Socket.io Reactjs Arduino Johnny-five'
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 150
            },
            yAxis: {
                title: {
                    text: 'Temp'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                formatter: function () {
                    return '<b>' + this.series.name + '</b><br/>' +
                        Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                        Highcharts.numberFormat(this.y, 2);
                }
            },
            legend: {
                enabled: false
            },
            exporting: {
                enabled: false
            },
            series: [{
                name: 'Temp data Serial',
                data: (function () {
                    // generate an array of random data
                    var data = [],
                        time = (new Date()).getTime(),
                        i;

                    for (i = -19; i <= 0; i += 1) {
                        data.push({
                            x: time + i * 1000,
                            y: Math.random()
                        });
                    }
                    return data;
                }())
            }]
        });
    });
});

var socket = io();
//  socket.emit('name', localStorage.getItem("user"));
</script>
</head>
<body>
  <div id="menu" align="center"></div>
  <div id="container" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
  <div  class="text-center well well-lg" id="info"></div>


<script type="text/babel">
var st=false;
var Menu = React.createClass({
    getInitialState : function () {
          return {
            status: "Parar" ,
            name: "Jdzl"
          };
        },
    handleClick: function (x,e) {

      if(!st){
          $("#status").removeClass("btn-danger");
          $("#status").addClass("btn-success");
          st= true;
          this.setState(function() { return {status: "Seguir"}; });
          socket.emit('OnNoise', true);
      }else{
          $("#status").removeClass("btn-success");
          $("#status").addClass("btn-danger");
          st= false;
          this.setState(function() { return {status: "Parar"}; });
          socket.emit('OnNoise', false);
      }

        },
    render: function () {
      let boundClick = this.handleClick.bind(this, '1');

          return (
            <fieldset>
            <legend>{this.state.name}</legend>
            <button id="status" className="btn btn-danger" onClick={boundClick}>{this.state.status}   </button>
            </fieldset>
          );
        }
      });
var Info = React.createClass({
  render: function () {
        return (
          <div id="volt"></div>
        )
  }

});
      ReactDOM.render(
        <Menu />,
        document.getElementById('menu')
      );
      ReactDOM.render(
        <Info />,
        document.getElementById('info')
      );
    </script>
  </body>
</html>
